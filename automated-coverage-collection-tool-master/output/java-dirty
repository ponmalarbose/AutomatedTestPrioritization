class: uk/co/probablyfine/dirty/utils/Types
method: lambda$static$5 (Ljava/nio/ByteBuffer;Ljava/lang/Integer;Ljava/lang/Object;)V
all statements: [14]
coveraged statements: [14]
--------------------------------------------
method: <clinit> ()V
all statements: [7, 9, 10, 11, 12, 13, 14, 15, 16]
coveraged statements: [7, 9, 10, 11, 12, 13, 14, 15, 16]
--------------------------------------------
method: getWriteField ()Luk/co/probablyfine/dirty/utils/Types$TriConsumer;
all statements: [56]
coveraged statements: [56]
--------------------------------------------
method: lambda$static$6 (Ljava/nio/ByteBuffer;Ljava/lang/Integer;Ljava/lang/Object;)V
all statements: [15]
coveraged statements: [15]
--------------------------------------------
method: lambda$static$7 (Ljava/nio/ByteBuffer;Ljava/lang/Integer;Ljava/lang/Object;)V
all statements: [16]
coveraged statements: [16]
--------------------------------------------
method: lambda$static$1 (Ljava/nio/ByteBuffer;Ljava/lang/Integer;Ljava/lang/Object;)V
all statements: [10]
coveraged statements: [10]
--------------------------------------------
method: lambda$static$2 (Ljava/nio/ByteBuffer;Ljava/lang/Integer;Ljava/lang/Object;)V
all statements: [11]
coveraged statements: [11]
--------------------------------------------
method: of (Ljava/lang/Class;)Luk/co/probablyfine/dirty/utils/Types;
all statements: [31, 32]
coveraged statements: [31, 32]
--------------------------------------------
method: lambda$static$3 (Ljava/nio/ByteBuffer;Ljava/lang/Integer;Ljava/lang/Object;)V
all statements: [12]
coveraged statements: [12]
--------------------------------------------
method: lambda$static$4 (Ljava/nio/ByteBuffer;Ljava/lang/Integer;Ljava/lang/Object;)V
all statements: [13]
coveraged statements: [13]
--------------------------------------------
method: values ()[Luk/co/probablyfine/dirty/utils/Types;
all statements: [7]
coveraged statements: [7]
--------------------------------------------
method: <init> (Ljava/lang/String;ILjava/lang/Class;ILuk/co/probablyfine/dirty/utils/Types$TriConsumer;Ljava/util/function/BiFunction;)V
all statements: [23, 24, 25, 26, 27, 28]
coveraged statements: [23, 24, 25, 26, 27, 28]
--------------------------------------------
method: toBoolean (B)Z
all statements: [40]
coveraged statements: [40]
--------------------------------------------
method: offSetForClass (Ljava/lang/Class;)I
all statements: [44, 45, 46, 47, 48]
coveraged statements: [44, 45, 46, 47, 48]
--------------------------------------------
method: getReadField ()Ljava/util/function/BiFunction;
all statements: [60]
coveraged statements: [60]
--------------------------------------------
method: lambda$static$8 (Ljava/nio/ByteBuffer;Ljava/lang/Integer;)Ljava/lang/Object;
all statements: [16]
coveraged statements: [16]
--------------------------------------------
method: getSize ()I
all statements: [52]
coveraged statements: [52]
--------------------------------------------
method: fromBoolean (Z)B
all statements: [36]
coveraged statements: [36]
--------------------------------------------
method: valueOf (Ljava/lang/String;)Luk/co/probablyfine/dirty/utils/Types;
all statements: [7]
coveraged statements: [7]
--------------------------------------------
method: lambda$static$0 (Ljava/nio/ByteBuffer;Ljava/lang/Integer;Ljava/lang/Object;)V
all statements: [9]
coveraged statements: [9]
--------------------------------------------

class: uk/co/probablyfine/dirty/utils/Exceptions$ExceptionalVoid

class: uk/co/probablyfine/dirty/utils/Nio
method: <init> ()V
all statements: [11, 13]
coveraged statements: null
--------------------------------------------
method: lambda$fileChannel$0 (Ljava/io/File;)Ljava/io/RandomAccessFile;
all statements: [17]
coveraged statements: [17]
--------------------------------------------
method: lambda$mapFile$1 (Ljava/nio/channels/FileChannel;II)Ljava/nio/MappedByteBuffer;
all statements: [21]
coveraged statements: [21]
--------------------------------------------
method: mapFile (Ljava/nio/channels/FileChannel;II)Ljava/nio/MappedByteBuffer;
all statements: [21]
coveraged statements: [21]
--------------------------------------------
method: fileChannel (Ljava/lang/String;)Ljava/nio/channels/FileChannel;
all statements: [16, 17]
coveraged statements: [16, 17]
--------------------------------------------

class: uk/co/probablyfine/dirty/utils/Exceptions$StoreException
method: <init> (Ljava/lang/Throwable;)V
all statements: [7, 8]
coveraged statements: [7, 8]
--------------------------------------------

class: uk/co/probablyfine/dirty/utils/Exceptions$ExceptionalSupplier

class: uk/co/probablyfine/dirty/utils/Exceptions
method: <init> ()V
all statements: [3]
coveraged statements: null
--------------------------------------------
method: unchecked (Luk/co/probablyfine/dirty/utils/Exceptions$ExceptionalVoid;)V
all statements: [29, 30, 31, 32, 33]
coveraged statements: [29, 30, 31, 32, 33]
--------------------------------------------
method: unchecked (Luk/co/probablyfine/dirty/utils/Exceptions$ExceptionalSupplier;)Ljava/lang/Object;
all statements: [21, 22, 23]
coveraged statements: [21]
--------------------------------------------

class: uk/co/probablyfine/dirty/utils/Classes
method: <init> ()V
all statements: [10, 12]
coveraged statements: null
--------------------------------------------
method: lambda$primitiveFields$0 (Ljava/lang/reflect/Field;)Z
all statements: [17]
coveraged statements: [17]
--------------------------------------------
method: primitiveFields (Ljava/lang/Class;)Ljava/util/stream/Stream;
all statements: [15, 16, 17]
coveraged statements: [15, 16, 17]
--------------------------------------------

class: uk/co/probablyfine/dirty/Store
method: extractEntry (I)Ljava/lang/Object;
all statements: [113, 115, 116, 118, 128]
coveraged statements: [113, 115, 116, 118, 128]
--------------------------------------------
method: size ()I
all statements: [87]
coveraged statements: [87]
--------------------------------------------
method: lambda$null$0 (Ljava/lang/reflect/Field;Ljava/lang/Object;)Ljava/lang/Object;
all statements: [64]
coveraged statements: [64]
--------------------------------------------
method: incrementSize ()V
all statements: [91, 92]
coveraged statements: [91, 92]
--------------------------------------------
method: reset ()V
all statements: [140, 141, 142, 143]
coveraged statements: [140, 141, 142, 143]
--------------------------------------------
method: get (I)Ljava/util/Optional;
all statements: [132]
coveraged statements: [132]
--------------------------------------------
method: getPartition (I)I
all statements: [78]
coveraged statements: [78]
--------------------------------------------
method: all ()Ljava/util/stream/Stream;
all statements: [99]
coveraged statements: [99]
--------------------------------------------
method: lambda$extractEntry$7 (Ljava/util/concurrent/atomic/AtomicInteger;Ljava/lang/Object;Ljava/lang/reflect/Field;)V
all statements: [119, 120, 121, 122, 124, 126, 127]
coveraged statements: [119, 120, 121, 122, 124, 126, 127]
--------------------------------------------
method: put (Ljava/lang/Object;)I
all statements: [54, 56, 57, 59, 60, 63, 71, 72, 74]
coveraged statements: [54, 56, 57, 59, 60, 63, 71, 72, 74]
--------------------------------------------
method: of (Ljava/lang/Class;)Luk/co/probablyfine/dirty/Store$WithFile;
all statements: [159]
coveraged statements: [159]
--------------------------------------------
method: entryRange (IILjava/util/function/IntUnaryOperator;)Ljava/util/stream/Stream;
all statements: [107, 108, 109]
coveraged statements: [107, 108, 109]
--------------------------------------------
method: lambda$reverse$5 (I)I
all statements: [103]
coveraged statements: [103]
--------------------------------------------
method: partitionsForSize (I)I
all statements: [82, 83]
coveraged statements: [82, 83]
--------------------------------------------
method: lambda$of$8 (Ljava/lang/Class;Ljava/lang/String;)Luk/co/probablyfine/dirty/Store;
all statements: [159]
coveraged statements: [159]
--------------------------------------------
method: reverse ()Ljava/util/stream/Stream;
all statements: [103]
coveraged statements: [103]
--------------------------------------------
method: lambda$null$6 (Ljava/lang/reflect/Field;Ljava/lang/Object;Ljava/lang/Object;)V
all statements: [124]
coveraged statements: [124]
--------------------------------------------
method: observeWrites (Ljava/util/function/BiConsumer;)V
all statements: [136, 137]
coveraged statements: [136, 137]
--------------------------------------------
method: close ()V
all statements: [147, 148, 149, 150, 151, 152]
coveraged statements: [147, 148, 151, 152]
--------------------------------------------
method: from (I)Ljava/util/stream/Stream;
all statements: [95]
coveraged statements: [95]
--------------------------------------------
method: lambda$all$4 (I)I
all statements: [99]
coveraged statements: [99]
--------------------------------------------
method: lambda$put$1 (Ljava/lang/Object;Ljava/util/concurrent/atomic/AtomicInteger;Ljava/lang/reflect/Field;)V
all statements: [64, 65, 66, 67, 68, 69]
coveraged statements: [64, 65, 66, 67, 68, 69]
--------------------------------------------
method: <init> (Ljava/lang/String;Ljava/lang/Class;)V
all statements: [33, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51]
coveraged statements: [33, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51]
--------------------------------------------
method: lambda$put$2 (Ljava/lang/Object;ILjava/util/function/BiConsumer;)V
all statements: [71]
coveraged statements: [71]
--------------------------------------------
method: lambda$from$3 (I)I
all statements: [95]
coveraged statements: [95]
--------------------------------------------

class: uk/co/probablyfine/dirty/testobjects/SmallObject
method: <init> ()V
all statements: [6]
coveraged statements: [6]
--------------------------------------------
method: <init> (I)V
all statements: [8, 9, 10]
coveraged statements: [8, 9, 10]
--------------------------------------------

class: uk/co/probablyfine/dirty/utils/Types$TriConsumer

class: uk/co/probablyfine/dirty/ClosedStoreException
method: <init> ()V
all statements: [3]
coveraged statements: [3]
--------------------------------------------

class: uk/co/probablyfine/dirty/Store$WithFile

class: uk/co/probablyfine/dirty/testobjects/HasEveryPrimitiveField
method: <clinit> ()V
all statements: [5]
coveraged statements: [5]
--------------------------------------------
method: <init> ()V
all statements: [27, 28]
coveraged statements: [27, 28]
--------------------------------------------
method: toString ()Ljava/lang/String;
all statements: [51]
coveraged statements: null
--------------------------------------------
method: <init> (IJFDSBCZ)V
all statements: [16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
coveraged statements: [16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
--------------------------------------------
method: equals (Ljava/lang/Object;)Z
all statements: [32, 33, 35, 37, 38, 39, 40, 41, 42, 43, 44, 46]
coveraged statements: [32, 33, 35, 37, 38, 39, 40, 41, 42, 43, 44, 46]
--------------------------------------------
